//
//  EditViewController.swift
//  CleanSwift
//
//  Created by Lukasz szyszkowski on 13.11.2016.
//  Copyright (c) 2016 Lukasz Szyszkowski. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import ActionKit

protocol EditViewControllerInput
{
  func updateContainerView(model:Edit.UpdateContainerView.ViewModel)
  func updateTextField(model:Edit.UpdateTextField.ViewModel)
  func updateSaveButton(model:Edit.UpdateSaveButton.ViewModel)
  func closeViewController()
}

protocol EditViewControllerOutput
{
  func updateTextField(request:Edit.UpdateTextField.Request)
  func saveAction(request:Edit.SaveAction.Request)
  func closeViewController()
  func updateContainerView()
  func updateSaveButton()
}

class EditViewController: UIViewController
{
  var output: EditViewControllerOutput!
  var router: EditRouter!
  private var inputDataClosure:(()->())!

  @IBOutlet private weak var containerView: UIView!
  @IBOutlet private weak var textField: UITextField!
  @IBOutlet private weak var saveButton: UIButton!
  override func awakeFromNib()
  {
    super.awakeFromNib()
    EditConfigurator.sharedInstance.configure(self)
  }

  override func viewDidLoad()
  {
    super.viewDidLoad()
    assert(inputDataClosure != nil, "Input data closure is nil!")
    
    inputDataClosure()
    output.updateContainerView()
    output.updateSaveButton()
  }
  
  func inputData(closure:()->()) {
    inputDataClosure = closure
  }
}

// MARK: Inputs

extension EditViewController:EditViewControllerInput {
  func updateContainerView(model: Edit.UpdateContainerView.ViewModel) {
    containerView.backgroundColor = Color(rawValue: model.backgroundColor)?.make
    containerView.layer.cornerRadius = model.cornerRadius
  }
  
  func updateTextField(model: Edit.UpdateTextField.ViewModel) {
    textField.text = model.text
  }
  
  func updateSaveButton(model: Edit.UpdateSaveButton.ViewModel) {
    saveButton.setAttributedTitle(model.title, forState: .Normal)
    saveButton.backgroundColor = Color(rawValue: model.backgroundColor)?.make
    saveButton.layer.cornerRadius = model.cornerRadius
  }
  
  func closeViewController() {
    router.closeViewController()
  }
}

// MARK: actions

extension EditViewController {
  @IBAction func saveButtonDidTap(sender: AnyObject) {
    let request = Edit.SaveAction.Request(text: textField.text)
    output.saveAction(request)
  }
  
  @IBAction func closeButtonDidTap(sender: AnyObject) {
    output.closeViewController()
  }
}